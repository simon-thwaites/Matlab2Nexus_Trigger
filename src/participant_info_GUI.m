function [sessionString, affectedSide] = participant_info_GUI()
%% Get particiapnt info for data collection
% user to enter in GUI
%   - participant  ID (w radio button selection for healthy/clinical)
%   - comment field to store text as required during capture. 
% ----------------------------------------------------------------------- %
% Major Revisions:
%   - 19/11/19: created, modified for SPN vs IPN data acquisition
%   - 20/11/19: fixed popups, callback resets, display sessoin string,
%   acquire data pushbutton.
%   - 21/11/19: fixed ID input check. All working. 
% ----------------------------------------------------------------------- %
% Simnon Thwaites
% simonthwaites1991@gmail.com
% ----------------------------------------------------------------------- %

%% initialise GUI
inputFig = figure('Tag',        'figTag', ...
                    'numbertitle', 'off', ...
                    'name',     'Participant Information', ...
                    'units',    'pixels',...
                    'position', [680 678 480 240],...
                    'toolbar',  'none',...
                    'menu',     'none');
                
%% creates handles attached to inputFig
% returns a structure containing handles of objects in a figure, 
% using their tags as fieldnames
h.inputFig = guihandles(inputFig); 

%% define GUI object positions (x-pos,y-pos, x-width, y-height)
leftTextAlign = 5;
leftObjectAlign = 110;
textWidth = 90;
objectWidth = 200;
text_object_height = 15;

cohort_radioText_pos = [ leftTextAlign , 200 , textWidth , text_object_height ];
cohort_radio_pos = [ leftObjectAlign , 200 , objectWidth , text_object_height ;...
                     leftObjectAlign+100 , 200 , objectWidth , text_object_height ];
                
nailRemoved_radioText_pos = [ leftTextAlign , 150 , textWidth , text_object_height ];
nailRemoved_radio_pos = [ leftObjectAlign , 150 , objectWidth , text_object_height ;...
                         leftObjectAlign+100 , 150 , objectWidth ,text_object_height ];
                    
timePoint_popupText_pos = [ leftTextAlign+7 , 100 , textWidth , text_object_height ];
timePoint_popup_pos = [ leftObjectAlign , 100 , objectWidth , text_object_height ];

IDtext_pos = [ leftTextAlign , 50 , textWidth , text_object_height ];
IDtextInput_pos = [ leftObjectAlign , 50 , objectWidth , text_object_height ];

generateSessionString_pushButton_pos = [ 320 , 180 , 150 , 40 ];
sessionString_Text_pos = [ leftTextAlign + 2 , 10 , textWidth , text_object_height];
sessionString_Display_pos = [ leftObjectAlign , 10 , objectWidth , text_object_height ];

acquireData_pushButton_pos = [ 320 , 10 , 150 , 40 ];

h.inputFig.sessionStringDisplay = ''; % intialise
h.inputFig.sessionString.nail = '';
h.inputFig.IDtextInputString = '<Enter Participant ID, then press Enter>';

affectedSide_Text_pos = [ 320 , 120 , 150 , 40 ];
affectedSide_Bgroup_position = [320 , 100 , 150 , 40];
affectedSide_radio_pos = [5, 10, 75, 20;...
    95, 10, 75, 20];

%% initialise popup state value and string
h.inputFig.popupValue = 1;
h.inputFig.popupString_clinical = {'<Select time point>', '3months',...
                                   '6months', '12months', '18months'};                          

%% define UI controls
h.inputFig.IDtext = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   'Participant ID:   ',...
                    'Position', IDtext_pos);               
h.inputFig.IDtextInput = uicontrol('Parent',    inputFig, ...
                    'Style',    'edit',...
                    'Callback', @textCallBack,...
                    'Units',    'pixels', ...
                    'String',   h.inputFig.IDtextInputString,...
                    'Position', IDtextInput_pos,...
                    'visible',  'off');               
h.inputFig.cohort_radioText = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   'Select cohort:   ',...
                    'Position', cohort_radioText_pos);
h.inputFig.cohort_radio(1) = uicontrol('Parent',    inputFig, ...
                    'Style',    'radiobutton', ...
                    'Callback', @cohort_radioButtonCallback, ...
                    'Units',    'pixels', ...
                    'Position', cohort_radio_pos(1,:), ...
                    'String',   'Healthy', ...
                    'Value',    0);
h.inputFig.cohort_radio(2) = uicontrol('Parent',    inputFig, ...
                    'Style',    'radiobutton', ...
                    'Callback', @cohort_radioButtonCallback, ...
                    'Units',    'pixels', ...
                    'Position', cohort_radio_pos(2,:), ...
                    'String',   'Clinical', ...
                    'Value',    0);
% html string required for multiline text on button  
% e.g., '<html>This is a multiline<br>string</html>'
h.inputFig.generateSessionString_pushButton = uicontrol('Parent',    inputFig, ...
                    'style',    'pushbutton',...  
                    'units',    'pixels',...
                    'position', generateSessionString_pushButton_pos,...
                    'string',   'Generate Session String',...
                    'callback', @generateSessionString_pushButtonCallback,...
                    'enable',  'off');
h.inputFig.nailRemoved_radioText = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   'Nail removed:   ',...
                    'Position', nailRemoved_radioText_pos);
h.inputFig.nailRemoved_radio(1) = uicontrol('Parent',    inputFig, ...
                    'Style',    'radiobutton', ...
                    'Callback', @nailRemoved_radioButtonCallback, ...
                    'Units',    'pixels', ...
                    'Position', nailRemoved_radio_pos(1,:), ...
                    'String',   'No', ...
                    'Value',    1, ...
                    'visible',  'off');
h.inputFig.nailRemoved_radio(2) = uicontrol('Parent',    inputFig, ...
                    'Style',    'radiobutton', ...
                    'Callback', @nailRemoved_radioButtonCallback, ...
                    'Units',    'pixels', ...
                    'Position', nailRemoved_radio_pos(2,:), ...
                    'String',   'Yes', ...
                    'Value',    0,...
                    'visible',  'off');
h.inputFig.timePoint_popup = uicontrol('Parent',    inputFig, ...
                    'Style',    'popup', ...
                    'Units',    'pixels', ...
                    'String',   h.inputFig.popupString_clinical, ...
                    'Position', timePoint_popup_pos, ...
                    'Value',    h.inputFig.popupValue, ...
                    'Callback', @timePoint_popupCallback, ...
                    'Visible',  'off');
h.inputFig.timePoint_popupText = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   'Select Timepoint:   ',...
                    'Position', timePoint_popupText_pos);
h.inputFig.sessionString_Text = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   'Session String:   ',...
                    'Position', sessionString_Text_pos);
h.inputFig.sessionString_Display = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   h.inputFig.sessionStringDisplay,...
                    'Position', sessionString_Display_pos, ...
                    'visible',  'off');                
h.inputFig.acquireData_pushButton = uicontrol('Parent',    inputFig, ...
                    'style',    'pushbutton',...  
                    'units',    'pixels',...
                    'position', acquireData_pushButton_pos,...
                    'string',   'ACQUIRE DATA',...
                    'callback', @acquireData_pushButtonCallback,...
                    'enable',  'off');
h.inputFig.affectedSide_Text = uicontrol('Parent',    inputFig, ...
                    'Style',    'text',...
                    'Units',    'pixels', ...
                    'String',   'Affected Side:',...
                    'Position', affectedSide_Text_pos);
h.inputFig.affectedSide_buttongroup = uibuttongroup('Parent', inputFig, ...
                    'Visible',              'off',...
                    'unit',                 'pixels',...
                    'position',             affectedSide_Bgroup_position, ...
                    'SelectionChangedFcn',  @affectedSide_radio_CallBack);
h.inputFig.affectedSide_radio(1) = uicontrol('Parent',    h.inputFig.affectedSide_buttongroup, ...
                    'unit',                 'pixels',...
                    'style',                'radiobutton',...
                    'position',             affectedSide_radio_pos(1,:), ...
                    'string',               'Left', ...
                    'value',                 1,...
                    'enable',               'off');
h.inputFig.affectedSide_radio(2) = uicontrol('Parent',    h.inputFig.affectedSide_buttongroup, ...
                    'unit',                 'pixels',...
                    'style',                'radiobutton',...
                    'position',             affectedSide_radio_pos(2,:), ...
                    'string',               'Right', ...
                    'value',                 0,...
                    'enable',               'off');
h.inputFig.affectedSide_buttongroup.Visible = 'on'; % turn visibility on now buttons are made.
h.inputFig.affectedSide_selection = h.inputFig.affectedSide_radio(1).String; % default value
                
h.inputFig.textEntered = 0;     % var to make sure Participant ID entered first 
guidata(inputFig,h.inputFig);  % update handles
uiwait(inputFig)
inputData = get(0,'UserData');
sessionString = inputData.sessionString;
affectedSide = inputData.affectedSide;
end

%% CALLBACKS

function cohort_radioButtonCallback(radio_object,~,~)
h.inputFig = guidata(radio_object);
% force only one button to be selected
otherRadio = h.inputFig.cohort_radio(h.inputFig.cohort_radio ~= radio_object);
set(otherRadio, 'Value', 0);

% if clinical, make nail removed option visible
if h.inputFig.cohort_radio(2).Value == 1 % clinical
    set(h.inputFig.nailRemoved_radio(1),'visible', 'on');
    set(h.inputFig.nailRemoved_radio(2),'visible', 'on');
    set(h.inputFig.timePoint_popup,'visible','on', ...
        'Value',1,'string',h.inputFig.popupString_clinical);
    set(h.inputFig.IDtextInput,'visible','off','string',h.inputFig.IDtextInputString);
    h.inputFig.sessionString.cohort = 'CL';
elseif h.inputFig.cohort_radio(2).Value == 0 && h.inputFig.cohort_radio(1).Value == 0
    set(h.inputFig.IDtextInput,'visible','off','string',h.inputFig.IDtextInputString);
    set(h.inputFig.nailRemoved_radio(1),'visible', 'off','value',1);
    set(h.inputFig.nailRemoved_radio(2),'visible', 'off','value',0);
    set(h.inputFig.timePoint_popup,'visible','off','Value',0);
    h.inputFig.sessionString.nail = '';
else % healthy
    set(h.inputFig.nailRemoved_radio(1),'visible', 'off','value',1);
    set(h.inputFig.nailRemoved_radio(2),'visible', 'off','value',0);
    set(h.inputFig.timePoint_popup,'visible','off','Value',0);
    set(h.inputFig.IDtextInput,'visible','on','string',h.inputFig.IDtextInputString);
    set(h.inputFig.sessionString_Display,'visible','off');
    h.inputFig.sessionString.cohort = 'HE';
    h.inputFig.sessionString.timePoint = '';
    h.inputFig.sessionString.nail = '';
end
set(h.inputFig.generateSessionString_pushButton,'enable','off')
set(h.inputFig.sessionString_Display,'visible','off')
set(h.inputFig.acquireData_pushButton,'enable','off')
guidata(radio_object,h.inputFig)
end

%%
function nailRemoved_radioButtonCallback(radio_object,~,~)
h.inputFig = guidata(radio_object);
% force only one button to be selected
otherRadio = h.inputFig.nailRemoved_radio(h.inputFig.nailRemoved_radio ~= radio_object);
set(otherRadio, 'Value', 0);
h.inputFig.sessionString.nail = ''; % empty string
set(h.inputFig.timePoint_popup,'visible','on','Value',1);
set(h.inputFig.IDtextInput,'visible','off','string',h.inputFig.IDtextInputString);
set(h.inputFig.generateSessionString_pushButton,'enable','off')
set(h.inputFig.sessionString_Display,'visible','off')
set(h.inputFig.acquireData_pushButton,'enable','off')

if h.inputFig.cohort_radio(2).Value == 1 % clinical, check nail
    if h.inputFig.nailRemoved_radio(2).Value == 1 % nail has been removed
        h.inputFig.sessionString.nail = '_NR';
    end
end
guidata(radio_object,h.inputFig)
end

%%
function timePoint_popupCallback(popup_object,~,~)
h.inputFig = guidata(popup_object);
h.inputFig.popupValue = popup_object.Value;     % get popup value 
h.inputFig.popupString = popup_object.String;   % get popup string

set(h.inputFig.IDtextInput,'visible','on','string',h.inputFig.IDtextInputString);
set(h.inputFig.generateSessionString_pushButton,'enable','off')
set(h.inputFig.sessionString_Display,'visible','off')
set(h.inputFig.acquireData_pushButton,'enable','off')

if h.inputFig.popupValue == 1
    set(h.inputFig.IDtextInput,'visible','off');
    h.inputFig.sessionString.timePoint = '';
else
    set(h.inputFig.IDtextInput,'visible','on');
    h.inputFig.sessionString.timePoint = ['_',char(h.inputFig.popupString(h.inputFig.popupValue,:))]; % store selection
end
guidata(popup_object,h.inputFig)
end

%%
function textCallBack(text_object,~,~)
h.inputFig = guidata(text_object);
% h.inputFig.textEntered = 1;    % change to 1, allow other callbacks to run
h.inputFig.sessionString.participantID = h.inputFig.IDtextInput.String; 
%-------------------------------%
% could make input string more robust here
%-------------------------------%
set(h.inputFig.generateSessionString_pushButton, 'enable', 'on');
set(h.inputFig.acquireData_pushButton,'enable','off')
% stores the specified data in the figure's application data
guidata(text_object,h.inputFig)
end

%%
function generateSessionString_pushButtonCallback(generateSessionString_pushButton_object,~,~)
h.inputFig = guidata(generateSessionString_pushButton_object);
stringCheck = str2double(h.inputFig.sessionString.participantID); % output NaN if ID contains non-numeric input
if ~isnan(stringCheck) && length(h.inputFig.sessionString.participantID) == 3
    % e.g. CL001_NR_3months or CL001_3months or HE001
    sessionStringDisplay = [ h.inputFig.sessionString.cohort h.inputFig.sessionString.participantID ...
        h.inputFig.sessionString.nail h.inputFig.sessionString.timePoint ];
    set(h.inputFig.sessionString_Display,'string',sessionStringDisplay,'visible','on');
    set(h.inputFig.affectedSide_radio(1),'enable','on');
    set(h.inputFig.affectedSide_radio(2),'enable','on');
    set(h.inputFig.acquireData_pushButton,'enable','on');
else
    warndlg('Participant ID must be numeric with length 3','ERROR: Incorrect Particiapnt ID')
end

guidata(generateSessionString_pushButton_object,h.inputFig)
end

%%
function acquireData_pushButtonCallback(acquireData_pushButton_object,~,~)
h.inputFig = guidata(acquireData_pushButton_object);
% store session string as matlab root UserData structure so it can be
% accessed once the inputFig is closed by acquireData_pushButtonCallback
inputData = struct('sessionString',h.inputFig.sessionString_Display.String,'affectedSide',h.inputFig.affectedSide_selection);
set(0,'UserData',inputData);
guidata(acquireData_pushButton_object,h.inputFig)
close(get(acquireData_pushButton_object,'Parent'))    % close parent of acquireData_pushButton_object (inputFig)
end

%%
function affectedSide_radio_CallBack(affectedSide_radio_object,event,~)
h.inputFig = guidata(affectedSide_radio_object);
h.inputFig.affectedSide_selection = event.NewValue.String; % store current selection
guidata(affectedSide_radio_object,h.inputFig)
end